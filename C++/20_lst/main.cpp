// int main()
// {
//     char x;// char = 1byte= 8bit, 能表示256种字符--> ASCII（只有256个字符）
// }

//#############################################################################
// 用户自定义类型
// #include<iostream>

// int  operator "" _ddd(long double x)
// {
//     return (int)x * 2;
// }

// int main()
// {
//     int x = 3.14_ddd; //_ddd是秒。也可以是吨
//     std::cout << x << "\n";
// }

//#############################################################################
//定义的申明
//需要构造俩个目标文件

// #include <iostream>

// extern int g_x; //申明 extern表示从外部来的

// int main()
// {
//     std::cout << g_x << std::endl;
// }

//#############################################################################
// #include <iostream>

// int g_x;  //如果是全局为0




// void fun() //函数被调用很多次，不知道。在函数内部会造成cpu空间的得不偿失，C++是一们关注性能的语言，这样很不好
//           //全局变量的构造成本较低，程序多次运行的代价不高，始终是开辟的那段内存空间
//           //函数内部的🦃缺省化，会多次占cpu内存，得不偿失 请注意
// {
//     int x; //为x分配缺省值，是会耗费cpu的『开辟内存空间』
// };

// int main()
// {

//     std::cout << g_x << std::endl;

//     int x; //缺省初始化，没有赋值。 如果是函数内部的一个变量会被赋予缺省值（这个值是随机的）
//     std::cout << x << std::endl;

// }

//#############################################################################
// #include <iostream>
//#############################################################################
// int g_x(6);

// int main()
// {
//     std::cout << g_x << std::endl;
// }

// #include <iostream>

//#############################################################################
// int main()
// {
//     long double x = 1.3; //left: float x   right； double float
//     std::cout << x << std::endl;

//     int y = 'c';

//     short z(3);

//     y = z;
// }

//#############################################################################
// #include <iostream>

// int main()
// {
//     bool x = 1;
//     int y = x;
//     std::cout << y << '\n';
//     // unsigned int x = -1; //int 转为unsigned int
//     // // std::cout << x << std::endl;
//     // std::cout << x << '\n';
// }

//#############################################################################
// #include <iostream>

// int main()
// {
//     if(3)
//     {

//     }
// }


//数值转换的时候发生比较
//--隐式（编译器自动完成，隐形完成）类型转换不仅发生在赋值转换
#include <iostream>
int main()
{
    int x = -1; 
    unsigned int y = 3;
    std::cout<< (x<y) <<std::endl;//c++一个重要规定，一个带符号的数和一个不带符号的数进行比较的时候，那么进行类型转换的时候一定是要把
                                 //带符号转化为无符号的值。
}